name: Build Notebook Images

on:
  push:
    branches: [ main ]
    # tags:
    # - 'v*.*.*'
  pull_request:
    branches:
      - 'main'

jobs:
  build-matrix:
    name: Create Build Matrix
    runs-on: ubuntu-latest
    steps:
    -
        name: Checkout
        id: set-matrix
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # No shallow clone, we need all history
          token: ${{ secrets.PLURAL_BOT_PAT }}
    - name: 'Setup Node'
      uses: actions/setup-node@v3
      with:
        node-version: 18.12.1
    - name: Install Semantic Release Plus
      run: npm install -g semantic-release-plus @semantic-release/exec
    - name: generate matrix
      id: generate-matrix
      env:
        GITHUB_TOKEN: ${{ secrets.PLURAL_BOT_PAT }}
      run: |
          if [ ${{ github.event_name }} == 'pull_request' ];
          then
            CHANGED_DIRS=$(git diff-tree --no-commit-id --name-only -r ${{ github.event.pull_request.head.sha }} | xargs -I {} dirname {})
          else
            CHANGED_DIRS=$(git diff-tree --no-commit-id --name-only -r ${{ github.sha }} | xargs -I {} dirname {})
          fi
          if [ -z "${CHANGED_DIRS}" ];
          then
            CHANGED_DIRS=$(dirname $(git diff --name-only ${{ github.event.before }}..${{ github.event.after }}))
            if [ "${CHANGED_DIRS}" == "." ];
            then
              CHANGED_DIRS=
            fi
          fi
          echo "${CHANGED_DIRS}"

          CONTAINER_FOLDERS=$(for CHANGED_DIR in ${CHANGED_DIRS}; do echo ${CHANGED_DIR} | awk -F "/" '{print $1}'; done | sort -u)
          for CONTAINER_FOLDER in ${CONTAINER_FOLDERS}; do
            if [[ "${CONTAINER_FOLDER}" != "."* ]]; then
              APP_NAME="${CONTAINER_FOLDER}" semantic-release
              if [ -f "release_version" ]; then
                mv release_version ${CONTAINER_FOLDER}/release_version
              else
                echo "pr" > ${CONTAINER_FOLDER}/release_version
              fi
            fi
          done

          DOCKERFILES=$(for CHANGED_DIR in ${CHANGED_DIRS}; do find ${CHANGED_DIR} -name "*Dockerfile"; done | sort -u)
          echo "${DOCKERFILES}"
          MATRIX_PROJECTS_JSON="["
          MATRIX_INCLUDE_JSON="["
          for DOCKERFILE in ${DOCKERFILES}; do
              DIR=$(dirname ${DOCKERFILE})
              RELEASE=$(cat ${DIR}/release_version)
              if [[ "$(basename ${DOCKERFILE})" == *"cuda"* ]]
              then
                MATRIX_PROJECTS_JSON+=$(sed 's/^/"/;s/$/"/' <<< "${DIR}"-cuda)
                PROJECT="${DIR}"-cuda
              else
                MATRIX_PROJECTS_JSON+=$(sed 's/^/"/;s/$/"/' <<< "${DIR}")
                PROJECT="${DIR}"
              fi
              echo "{$MATRIX_PROJECTS_JSON}"
              MATRIX_INCLUDE_JSON+="{\"path\": \"${DIR}\", \"project\": \"${PROJECT}\", \"dockerfile\": \"${DOCKERFILE}\", \"version\": \"${RELEASE}\"}"
              echo "${MATRIC_INCLUDE_JSON}"
          done
          echo "{$MATRIX_PROJECTS_JSON}"
          echo "${MATRIC_INCLUDE_JSON}"
          MATRIX_INCLUDE_JSON="${MATRIX_INCLUDE_JSON//\}\{/\}, \{}"
          MATRIX_INCLUDE_JSON+="]"
          MATRIX_PROJECTS_JSON="${MATRIX_PROJECTS_JSON//\"\"/\", \"}"
          MATRIX_PROJECTS_JSON+="]"
          MATRIX_JSON="{\"include\": ${MATRIX_INCLUDE_JSON}}"
          echo "${MATRIX_JSON}"

          CONTINUE_DOCKER_JOB="no"
          if [[ "${MATRIX_PROJECTS_JSON}" != "[]" ]]; then
            CONTINUE_DOCKER_JOB="yes"
          fi

          echo "${CONTINUE_DOCKER_JOB}"

          echo "continue=${CONTINUE_DOCKER_JOB}" >> $GITHUB_OUTPUT
          echo "matrix=${MATRIX_JSON}" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.generate-matrix.outputs.matrix }}
      continue: ${{ steps.generate-matrix.outputs.continue }}
  build-images:
    if: needs.build-matrix.outputs.continue == 'yes'
    name: Build and push notebook images
    runs-on: ubuntu-latest
    needs: build-matrix
    strategy:
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    steps:
    -
        name: Checkout
        uses: actions/checkout@v2
    -
      name: Docker meta
      id: meta
      uses: crazy-max/ghaction-docker-meta@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          ghcr.io/pluralsh/kubeflow-notebooks-${{ matrix.project }}
        # generate Docker tags based on the following events/attributes
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{raw}},value=${{ matrix.version }}
          type=sha
    -
      name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    -
     name: Login to GHCR
     if: github.event_name != 'pull_request'
     uses: docker/login-action@v1
     with:
       registry: ghcr.io
       username: ${{ github.repository_owner }}
       password: ${{ secrets.GITHUB_TOKEN }}
    -
      name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ${{ matrix.path }}
        file: ${{ matrix.dockerfile }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
